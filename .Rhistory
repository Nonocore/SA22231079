input4[l + 1] = states[l][j - 1] + k3(l, i) * h;
}
// Evaluate k4 = dynamics(t, x, y, z, ...) for all states
for (int l = 0; l < m; ++l) {
NumericVector k4_row = dynamics(input4[0], input4);
for (int k = 0; k < m; ++k) {
k4(l, k) = k4_row[k];
}
}
// Update the state variables using the RK4 formula
for (int l = 0; l < m; ++l) {
states[l][j] = states[l][j - 1] + (k1(l, i) + 2 * k2(l, i) + 2 * k3(l, i) + k4(l, i)) * h / 6;
}
}
}
// Create a DataFrame to store the results
DataFrame result = DataFrame(states);
result.attr("names") = CharacterVector::create("t", "x", "y"); // Customize the column names if needed
result.attr("row.names") = IntegerVector::create();
result.attr("class") = "data.frame";
// Return the solution
return result;
}
')
setwd("C:\Users\12032\Desktop\Statistic Cal\example R\C")
setwd("C:/Users/12032/Desktop/Statistic Cal/example R/C")
library(Rcpp)
# Define the dynamics function
dynamics <- cppFunction(code = '
NumericVector dynamics(double t, NumericVector states) {
double x = states[0];
double y = states[1];
double dxdt = x * (1 - y);
double dydt = -y * (1 - x);
NumericVector result = NumericVector::create(dxdt, dydt);
return result;
}
')
# Define the odeRK4 function using Rcpp
odeRK4 <- cppFunction(code ='
DataFrame odeRK4(Function dynamics, NumericVector IC, double t0 = 0, double tn = 1, int n = 1000) {
// Time step size
double h = (tn - t0) / n;
// Time grid
NumericVector tt(n + 1);
for (int i = 0; i <= n; ++i) {
tt[i] = t0 + i * h;
}
// Number of state variables
int m = IC.size();
// State variables: list of grids of each state variable. This will be the returned solution
List states(m);
for (int i = 0; i < m; ++i) {
states[i] = NumericVector(n + 1);
states[i][0] = IC[i];
}
// Over every time-node
for (int j = 1; j <= n; ++j) {
NumericMatrix k1(m, m);
NumericMatrix k2(m, m);
NumericMatrix k3(m, m);
NumericMatrix k4(m, m);
// For each state variable
for (int i = 0; i < m; ++i) {
// Gather input: we need four evaluations of dynamics(t, ....)
NumericVector input1(m + 1);
NumericVector input2(m + 1);
NumericVector input3(m + 1);
NumericVector input4(m + 1);
// Time argument is first, always
input1[0] = tt[j - 1];
input2[0] = tt[j - 1] + 0.5 * h;
input3[0] = tt[j - 1] + 0.5 * h;
input4[0] = tt[j - 1] + h;
for (int l = 0; l < m; ++l) {
// The first input just takes the states
input1[l + 1] = states[l][j - 1];
}
// Evaluate k1 = dynamics(t, x, y, z, ...) for all states
for (int l = 0; l < m; ++l) {
NumericVector k1_row = dynamics(input1[0], input1);
for (int k = 0; k < m; ++k) {
k1(l, k) = k1_row[k];
}
}
// Get input ready for k2
for (int l = 0; l < m; ++l) {
// Second input is state[j-1] + 0.5 * h * k1[l]
input2[l + 1] = states[l][j - 1] + 0.5 * k1(l, i) * h;
}
// Evaluate k2 = dynamics(t, x, y, z, ...) for all states
for (int l = 0; l < m; ++l) {
NumericVector k2_row = dynamics(input2[0], input2);
for (int k = 0; k < m; ++k) {
k2(l, k) = k2_row[k];
}
}
// Get input ready for k3
for (int l = 0; l < m; ++l) {
input3[l + 1] = states[l][j - 1] + 0.5 * k2(l, i) * h;
}
// Evaluate k3 = dynamics(t, x, y, z, ...) for all states
for (int l = 0; l < m; ++l) {
NumericVector k3_row = dynamics(input3[0], input3);
for (int k = 0; k < m; ++k) {
k3(l, k) = k3_row[k];
}
}
// Get input ready for k4, the final evaluation
for (int l = 0; l < m; ++l) {
input4[l + 1] = states[l][j - 1] + k3(l, i) * h;
}
// Evaluate k4 = dynamics(t, x, y, z, ...) for all states
for (int l = 0; l < m; ++l) {
NumericVector k4_row = dynamics(input4[0], input4);
for (int k = 0; k < m; ++k) {
k4(l, k) = k4_row[k];
}
}
// Update the state variables using the RK4 formula
for (int l = 0; l < m; ++l) {
states[l][j] = states[l][j - 1] + (k1(l, i) + 2 * k2(l, i) + 2 * k3(l, i) + k4(l, i)) * h / 6;
}
}
}
// Create a DataFrame to store the results
DataFrame result = DataFrame(states);
result.attr("names") = CharacterVector::create("t", "x", "y"); // Customize the column names if needed
result.attr("row.names") = IntegerVector::create();
result.attr("class") = "data.frame";
// Return the solution
return result;
}
')
t0 <- 0
y0 <- c(1, 0)  # Initial values for y1 and y2
h <- 0.1
n <- 10
result <- rungeKutta(t0, y0, h, n)
sourceCpp(file='C.cpp')
t0 <- 0
y0 <- c(1, 0)  # Initial values for y1 and y2
h <- 0.1
n <- 10
result <- rungeKutta(t0, y0, h, n)
print(result)
plot(result)
t0 <- 0
y0 <- 0
h <- 0.1
n <- 10
g <- 9.8  # gravity acceleration
c <- 0.5  # air resistance coefficient
m <- 1.0  # object mass
result <- rungeKutta(t0, y0, h, n, g, c, m)
sourceCpp(file='C.cpp')
t0 <- 0
y0 <- 0
h <- 0.1
n <- 10
g <- 9.8  # gravity acceleration
c <- 0.5  # air resistance coefficient
m <- 1.0  # object mass
result <- rungeKutta(t0, y0, h, n, g, c, m)
print(result)
plot(result)
sourceCpp(file='C.cpp')
t0 <- 0
y0 <- 10
h <- 0.1
n <- 10
g <- 9.8  # gravity acceleration
c <- 0.5  # air resistance coefficient
m <- 1.0  # object mass
result <- rungeKutta(t0, y0, h, n, g, c, m)
print(result)
plot(result)
sourceCpp(file='C.cpp')
t0 <- 0
y0 <- c(0, 0)  # Initial values for position and velocity
h <- 0.1
n <- 10
g <- 9.8  # gravity acceleration
c <- 0.5  # air resistance coefficient
m <- 1.0  # object mass
result <- rungeKutta(t0, y0, h, n, g, c, m)
sourceCpp(file='C.cpp')
t0 <- 0
y0 <- c(0, 0)  # Initial values for position and velocity
h <- 0.1
n <- 10
g <- 9.8  # gravity acceleration
c <- 0.5  # air resistance coefficient
m <- 1.0  # object mass
result <- rungeKutta(t0, y0, h, n, g, c, m)
print(result)
plot(result)
plot(result(2))
plot(result[2])
plot(result[,2])
#' Euler scheme for first order ODEs
#'
#' @param dynamics the function of t and y in the explicit ODE \eqn{y'=f(t,y)}
#' @param y0 the initial value
#' @param t0 the initial value input
#' @param tn the terminal value input
#' @param n the number of sub-intervals to use, defaults to 1000
#'
#' @description {One dimensional first order ODE solver.}
#' @details {\code{f} must be a function of time and the state variable \code{y}}
#' @return data.frame of the time grid and solution grid
ode1.EulerScheme <- function(dynamics, y0, t0 = 0, tn = 1, n = 1000)
{
h <- (tn-t0)/n
y <- matrix(0, n+1)
# n+1 points, n sub-intervals
tt <- seq(t0, tn, length.out = n+1)
y[1] <- y0
for(i in 2:(n+1))
{
y[i] <- y[i-1] + h*dynamics(tt[i-1], y[i-1])
}
return(data.frame(time = tt, state = y))
}
f1 <- function(t, v) 9.8 - v^2
y <- ode1.EulerScheme(dynamics = f1, y0 = 0, tn = 10, n = 5000)
plot(y)
sourceCpp(file='C.cpp')
t0 <- 0
y0 <- 0
h <- 0.0002
n <- 5000
g <- 9.8  # gravity acceleration
c <- 0.5  # air resistance coefficient
m <- 1.0  # object mass
result <- eulerMethod(t0, y0, h, n, g, c, m)
print(result)
plot(result)
sourceCpp(file='C.cpp')
t0 <- 0
y0 <- 0
h <- 0.0002
n <- 5000
g <- 9.8  # gravity acceleration
c <- 0.5  # air resistance coefficient
m <- 1.0  # object mass
result <- eulerMethod(t0, y0, h, n, g, c, m)
sourceCpp(file='C.cpp')
t0 <- 0
y0 <- c(0, 0)  # Initial values for position and velocity
h <- 0.1
n <- 10
g <- 9.8  # gravity acceleration
c <- 0.5  # air resistance coefficient
m <- 1.0  # object mass
result <- eulerMethod(t0, y0, h, n, g, c, m)
print(result)
plot(result[,2])
plot(result[,1])
plot(result[,2])
sourceCpp(file='C.cpp')
t0 <- 0
y0 <- c(0, 0)  # Initial values for position and velocity
h <- 0.0002
n <- 5000
g <- 9.8  # gravity acceleration
c <- 0.5  # air resistance coefficient
m <- 1.0  # object mass
result <- eulerMethod(t0, y0, h, n, g, c, m)
print(result)
plot(result[,2])
t0 <- 0
y0 <- c(0, 0)  # Initial values for position and velocity
h <- 0.0002
n <- 10000
g <- 9.8  # gravity acceleration
c <- 0.5  # air resistance coefficient
m <- 1.0  # object mass
result <- eulerMethod(t0, y0, h, n, g, c, m)
print(result)
plot(result[,2])
f1 <- function(t, v) 9.8 - v^2
t0 <- 0
y0 <- c(0, 0)  # Initial values for position and velocity
h <- 0.0002
n <- 10000
g <- 9.8  # gravity acceleration
c <- 0.5  # air resistance coefficient
m <- 1.0  # object mass
library(microbenchmark)
tm1 <- microbenchmark::microbenchmark(
rnR = ode1.EulerScheme(dynamics = f1, y0 = 0, tn = 10, n = 5000),
rnC = eulerMethod(t0, y0, h, n, g, c, m)
)
sourceCpp(file='C.cpp')
library(microbenchmark)
tm1 <- microbenchmark::microbenchmark(
rnR = ode1.EulerScheme(dynamics = f1, y0 = 0, tn = 10, n = 5000),
rnC = eulerMethod(t0, y0, h, n, g, c, m)
)
ode1.EulerScheme <- function(dynamics, y0, t0 = 0, tn = 1, n = 1000)
{
h <- (tn-t0)/n
y <- matrix(0, n+1)
# n+1 points, n sub-intervals
tt <- seq(t0, tn, length.out = n+1)
y[1] <- y0
for(i in 2:(n+1))
{
y[i] <- y[i-1] + h*dynamics(tt[i-1], y[i-1])
}
return(data.frame(time = tt, state = y))
}
library(microbenchmark)
tm1 <- microbenchmark::microbenchmark(
rnR = ode1.EulerScheme(dynamics = f1, y0 = 0, tn = 10, n = 5000),
rnC = eulerMethod(t0, y0, h, n, g, c, m)
)
print(summary(tm1)[,c(1,3,5,6)])
devtools::document()
getwd()
setwd("C:/Users/12032/Desktop/Statistic Cal/example R/SA22231079")
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('../SA22231079_1.0.tar',repo=NULL)
install.packages('../SA22231079_1.0.tar')
getwd()
setwd("C:/Users/12032/Desktop/Statistic Cal/example R")
install.packages('../SA22231079_1.0.tar')
install.packages('../SA22231079_1.0.tar', repo=NULL)
system('where make')
system('g++ -v')
install.packages("C:/Users/12032/Desktop/Statistic Cal/example R/SA22231079_1.0.tar.gz", repos = NULL, type = "source")
devtools::build_vignettes("New Func.Rmd")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
knitr::opts_chunk$set(echo = TRUE)
RK4 <- function(dynamics, y0, t0 = 0, tn = 1, n = 1000)
{
h <- (tn-t0)/n
y <- matrix(0, n+1)
# n+1 points, n sub-intervals
tt <- seq(t0, tn, length.out = n+1)
y[1] <- y0
for(i in 2:(n+1))
{
k1 <- dynamics(tt[i-1], y[i-1])
k2 <- dynamics(tt[i-1]+0.5*h, y[i-1]+0.5*h*k1)
k3 <- dynamics(tt[i-1]+0.5*h, y[i-1]+0.5*h*k2)
k4 <- dynamics(tt[i-1]+h, y[i-1]+h*k3)
y[i] <- y[i-1] + (h/6)*(k1+2*k2+2*k3+k4)
}
return(data.frame(time = tt, state = y))
}
f1 <- function(t, v) 9.8 - v^2
v1 <- RK4(dynamics = f1, y0 = 0, tn = 1, n = 5000)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
devtools::install_github("Nonocore/SA22231079")
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
devtools::build(vignettes=FALSE)
install.packages('../SA22231079_1.0.tar.gz',repo=NULL)
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
cppFunction(code='
void f(double t, NumericVector y, NumericVector dydt, double g, double c, double m) {
dydt[0] = y[1];
dydt[1] = g - (c / m) * y[1] * y[1];
}
')
cppFunction(code='
NumericMatrix rungeKutta(double t0, NumericVector y0, double h, int n, double g, double c, double m) {
int dim = y0.length();
NumericMatrix y(n + 1, dim);
NumericVector k1(dim), k2(dim), k3(dim), k4(dim);
double t = t0;
y(0, _) = y0;
for (int i = 0; i < n; i++) {
f(t, y(i, _), k1, g, c, m);
f(t + h / 2, y(i, _) + h * k1 / 2, k2, g, c, m);
f(t + h / 2, y(i, _) + h * k2 / 2, k3, g, c, m);
f(t + h, y(i, _) + h * k3, k4, g, c, m);
y(i + 1, _) = y(i, _) + h * (k1 + 2 * k2 + 2 * k3 + k4) / 6;
t += h;
}
return y;
}
')
library(Rcpp)
ans = rungeKutta(t0 = 0, y0 = 0, h = 0.0002, n = 10000, g = 9.8, c = 0.5, m = 1.0)
library(Rcpp)
ans = rungeKutta(t0 = 0, y0 = 0, h = 0.0002, n = 10000, g = 9.8, c = 0.5, m = 1.0)
library(Rcpp)
ans <- rungeKutta(t0 = 0, y0 = 0, h = 0.0002, n = 10000, g = 9.8, c = 0.5, m = 1.0)
library(Rcpp)
rungeKutta(t0 = 0, y0 = 0, h = 0.0002, n = 10000, g = 9.8, c = 0.5, m = 1.0)
library(Rcpp)
ans <- rungeKutta(t0 = 0, y0 = matrix(0,0), h = 0.0002, n = 10000, g = 9.8, c = 0.5, m = 1.0)
library(Rcpp)
ans <- rungeKutta(t0 = 0, y0 = c(0,0), h = 0.0002, n = 10000, g = 9.8, c = 0.5, m = 1.0)
plot(ans)
RK4 <- function(dynamics, y0, t0 = 0, tn = 1, n = 1000)
{
h <- (tn-t0)/n
y <- matrix(0, n+1)
# n+1 points, n sub-intervals
tt <- seq(t0, tn, length.out = n+1)
y[1] <- y0
for(i in 2:(n+1))
{
k1 <- dynamics(tt[i-1], y[i-1])
k2 <- dynamics(tt[i-1]+0.5*h, y[i-1]+0.5*h*k1)
k3 <- dynamics(tt[i-1]+0.5*h, y[i-1]+0.5*h*k2)
k4 <- dynamics(tt[i-1]+h, y[i-1]+h*k3)
y[i] <- y[i-1] + (h/6)*(k1+2*k2+2*k3+k4)
}
return(data.frame(time = tt, state = y))
}
f1 <- function(t, v) 9.8 - v^2
v1 <- RK4(dynamics = f1, y0 = 0, tn = 1, n = 5000)
RK4 <- function(dynamics, y0, t0 = 0, tn = 1, n = 1000)
{
h <- (tn-t0)/n
y <- matrix(0, n+1)
# n+1 points, n sub-intervals
tt <- seq(t0, tn, length.out = n+1)
y[1] <- y0
for(i in 2:(n+1))
{
k1 <- dynamics(tt[i-1], y[i-1])
k2 <- dynamics(tt[i-1]+0.5*h, y[i-1]+0.5*h*k1)
k3 <- dynamics(tt[i-1]+0.5*h, y[i-1]+0.5*h*k2)
k4 <- dynamics(tt[i-1]+h, y[i-1]+h*k3)
y[i] <- y[i-1] + (h/6)*(k1+2*k2+2*k3+k4)
}
return(data.frame(time = tt, state = y))
}
f1 <- function(t, v) 9.8 - v^2
v1 <- RK4(dynamics = f1, y0 = 0, tn = 1, n = 5000)
plot(v1)
library(microbenchmark)
tm1 <- microbenchmark::microbenchmark(
rnR = RK4(dynamics = function(t, v) 9.8 - v^2, y0=0, t0 = 0, tn = 1, n = 5000),
rnC = rungeKutta(t0 = 0, y0 = c(0,0), h = 0.0002, n = 10000, g = 9.8, c = 0.5, m = 1.0)
)
print(summary(tm1)[,c(1,3,5,6)])
EulerScheme <- function(dynamics, y0, t0 = 0, tn = 1, n = 1000)
{
h <- (tn-t0)/n
y <- matrix(0, n+1)
# n+1 points, n sub-intervals
tt <- seq(t0, tn, length.out = n+1)
y[1] <- y0
for(i in 2:(n+1))
{
y[i] <- y[i-1] + h*dynamics(tt[i-1], y[i-1])
}
return(data.frame(time = tt, state = y))
}
f1 <- function(t, v) 9.8 - v^2
v1 <- EulerScheme(dynamics = f1, y0 = 0, tn = 1, n = 5000)
EulerScheme <- function(dynamics, y0, t0 = 0, tn = 1, n = 1000)
{
h <- (tn-t0)/n
y <- matrix(0, n+1)
# n+1 points, n sub-intervals
tt <- seq(t0, tn, length.out = n+1)
y[1] <- y0
for(i in 2:(n+1))
{
y[i] <- y[i-1] + h*dynamics(tt[i-1], y[i-1])
}
return(data.frame(time = tt, state = y))
}
f1 <- function(t, v) 9.8 - v^2
v1 <- EulerScheme(dynamics = f1, y0 = 0, tn = 1, n = 5000)
plot(v1)
library(Rcpp)
ans <- eulerMethod(t0 = 0, y0 = c(0,0), h = 0.0002, n = 10000, g = 9.8, c = 0.5, m = 1.0)
plot(ans)
library(microbenchmark)
tm1 <- microbenchmark::microbenchmark(
rnR = EulerScheme(dynamics = function(t, v) 9.8 - v^2, y0=0, t0 = 0, tn = 1, n = 5000),
rnC = eulerMethod(t0 = 0, y0 = c(0,0), h = 0.0002, n = 10000, g = 9.8, c = 0.5, m = 1.0)
)
print(summary(tm1)[,c(1,3,5,6)])
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
devtools::install_github("Nonocore/SA22231079-package")
devtools::install_github("Nonocore/SA22231079")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
